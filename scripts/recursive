# Copyright (c) 2024 Mike Chambers
# https://github.com/mikechambers/firefly-cl
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Automates the generation of 200 images using the firefly CLI based on a defined prompt,
# and compiles these images into a video with ffmpeg. It manages output directories,
# handles sequential naming of images, and overwrites the final video file on each run.
# Adjust the `prompt` and `numGenerations` variables as needed. Requires firefly CLI and
# ffmpeg installed and accessible in the system's PATH.

#!/bin/bash

# Define cleanup function
cleanup() {
    echo "Cleaning up..."
    # Check if the caffeinate process is still running before trying to kill it
    if kill -0 "$caffeinatePID" 2>/dev/null; then
        kill "$caffeinatePID"
    fi
    # Remove temporary label files
    find "${outputDir}" -name 'label_temp*.jpg' -delete
}

# Setup trap to call cleanup function on script exit, error, or interrupt
trap cleanup EXIT

# Start caffeinate in the background to prevent sleep
caffeinate -i &
caffeinatePID=$!

# Define the output directory
outputDir=~/tmp/firefly

# Ensure the output directory exists
mkdir -p "$outputDir"

# Define the prompt
prompt="Big bang universe explosion, supernova blast, made out of colorful bath soaps, super detailed"

# Number of generations
numGenerations=6

# Initial firefly command without the reference-image
fireflyCmd="firefly --prompt \"$prompt\" --output-dir \"$outputDir\" --width 1000 --height 1000 --content-class photo"

# Execute the initial firefly command with the first filename
filename="0.jpg"
eval $fireflyCmd --filename "$filename"

# Initialize referenceImage to point to the first image
referenceImage="${outputDir}/0.jpg"

for i in $(seq 1 $numGenerations)
do
  # Generate the current filename
  currentFileName="${i}.jpg"

  # Execute the firefly command with the current filename and reference image
  eval $fireflyCmd --filename "$currentFileName" --reference-image "$referenceImage"

  # Update referenceImage to the most recently generated image for the next iteration
  referenceImage="${outputDir}/${currentFileName}"

  echo "Generated image: ${i}"

  # Sleep for 10 seconds before the next iteration
  sleep 10
done

# ffmpeg command to create a video from the images, now looking in the correct directory
ffmpeg -y -r 10 -f image2 -s 1000x1000 -i "$outputDir/%d.jpg" -vcodec libx264 -crf 25 -pix_fmt yuv420p "$outputDir/output.mp4"